(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{410:function(e,r,t){e.exports=t.p+"assets/img/fiberTree01.fa7953da.png"},411:function(e,r,t){e.exports=t.p+"assets/img/fiberTree02.dae35929.png"},412:function(e,r,t){e.exports=t.p+"assets/img/fiberTree03.f4e0ad8b.png"},413:function(e,r,t){e.exports=t.p+"assets/img/fiberTree04.ddedea81.png"},414:function(e,r,t){e.exports=t.p+"assets/img/fiberTree05.841cb057.png"},456:function(e,r,t){"use strict";t.r(r);var s=t(16),v=Object(s.a)({},(function(){var e=this,r=e.$createElement,s=e._self._c||r;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"fiber结构的工作原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fiber结构的工作原理"}},[e._v("#")]),e._v(" Fiber结构的工作原理")]),e._v(" "),s("p",[e._v("我们知道"),s("code",[e._v("Fiber")]),e._v("节点可以保存对应的"),s("code",[e._v("DOM")]),e._v("节点，相应的，"),s("code",[e._v("Fiber")]),e._v("节点构成的"),s("code",[e._v("Fiber")]),e._v("树的结构也对应了"),s("code",[e._v("DOM")]),e._v("树。"),s("br"),e._v("\n那么"),s("code",[e._v("React")]),e._v("是如何更新"),s("code",[e._v("DOM")]),e._v("的呢？"),s("code",[e._v("React")]),e._v("采用的是”"),s("em",[e._v("双缓存")]),e._v("“技术来更新"),s("code",[e._v("DOM")]),e._v("。")]),e._v(" "),s("h2",{attrs:{id:"什么是-双缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-双缓存"}},[e._v("#")]),e._v(" 什么是“双缓存”")]),e._v(" "),s("p",[e._v("当使用"),s("code",[e._v("canvas")]),e._v("绘制动画，每一帧绘制都会调用"),s("code",[e._v("ctx.clearReact")]),e._v("清除上一帧的画面。")]),e._v(" "),s("p",[e._v("如果当前帧画面计算量较大，导致清除上一帧画面到绘制当前帧画面之间有较长间隙，就会出现白屏。")]),e._v(" "),s("p",[e._v("为了解决这个问题，可以在内存中绘制当前帧动画，绘制完毕之后直接用当前帧替换上一帧的画面，因为省去了两帧替换之间的时间，所以不会出现从白屏到出现画面的闪烁。")]),e._v(" "),s("p",[e._v("这种在"),s("strong",[e._v("内存中构建并直接替换")]),e._v("的技术叫"),s("em",[e._v("双缓存")]),e._v("。")]),e._v(" "),s("p",[s("code",[e._v("React")]),e._v("就是使用“"),s("em",[e._v("双缓存")]),e._v("”来完成"),s("code",[e._v("Fiber树")]),e._v("的构建和替换，即对应的"),s("code",[e._v("DOM")]),e._v("树的生成和更新。")]),e._v(" "),s("h2",{attrs:{id:"双缓存fiber树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双缓存fiber树"}},[e._v("#")]),e._v(" 双缓存Fiber树")]),e._v(" "),s("p",[e._v("在"),s("code",[e._v("React")]),e._v("中最多会同时存在"),s("strong",[e._v("两颗")]),s("code",[e._v("Fiber")]),e._v("树。当前在屏幕上显示的内容所对应的"),s("code",[e._v("Fiber")]),e._v("树就被称为"),s("code",[e._v("current Fiber")]),e._v("树，正在内存中构建的"),s("code",[e._v("Fiber")]),e._v("树就被称为"),s("code",[e._v("workInProgress Fiber")]),e._v("树。")]),e._v(" "),s("p",[e._v("而"),s("code",[e._v("current Fiber")]),e._v("树中的"),s("code",[e._v("Fiber")]),e._v("节点被称为"),s("code",[e._v("current Fiber")]),e._v("。同样，"),s("code",[e._v("workInProgress Fiber")]),e._v("树中的"),s("code",[e._v("Fiber")]),e._v("节点被称为"),s("code",[e._v("workInProgress Fiber")]),e._v("。"),s("code",[e._v("current Fiber")]),e._v("往往和"),s("code",[e._v("workInProgress Fiber")]),e._v("有着一一对应的关系，这个关系是通过各自身上"),s("code",[e._v("alternate")]),e._v("属性连接的。")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("createWorkInProgress")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("current"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Fiber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" pendingProps"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" any")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Fiber "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// order code...")]),e._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 通过alterbate属性连接")]),e._v("\n    workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("alternate "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" current"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    current"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("alternate "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// order code...")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("p",[e._v("在"),s("code",[e._v("Reconciler")]),e._v("阶段，"),s("code",[e._v("beginWork")]),e._v("方法在"),s("code",[e._v("update")]),e._v("逻辑时创建"),s("code",[e._v("workInProgress Fiber")]),e._v("节点时都会调用"),s("code",[e._v("createWorkInProgress")]),e._v("方法复用"),s("code",[e._v("current Fiber")]),e._v("节点，同时"),s("code",[e._v("createWorkInProgress")]),e._v("方法内部还会为"),s("code",[e._v("current Fiber")]),e._v("节点和"),s("code",[e._v("workInProgress Fiber")]),e._v("产生关联。")]),e._v(" "),s("p",[s("code",[e._v("React")]),e._v("应用的根节点通过使"),s("code",[e._v("current")]),e._v("指针在不同"),s("code",[e._v("Fiber")]),e._v("树的"),s("code",[e._v("rootFiber")]),e._v("间切换来完成"),s("code",[e._v("current Fiber")]),e._v("树指向的切换。")]),e._v(" "),s("p",[e._v("即当"),s("code",[e._v("workInProgress Fiber")]),e._v("树构建完成后进入"),s("code",[e._v("Renderer")]),e._v("（渲染器）渲染到页面上，应用根节点的"),s("code",[e._v("current")]),e._v("指针就指向"),s("code",[e._v("workInProgress Fiber")]),e._v("树，此时"),s("code",[e._v("workInProgress Fiber")]),e._v("树就顺利变为"),s("code",[e._v("current Fiber")]),e._v("树。每次状态更新都会产生新的"),s("code",[e._v("workInProgress Fiber")]),e._v("树，通过"),s("code",[e._v("current")]),e._v("与"),s("code",[e._v("workInProgress")]),e._v("的替换，来完成"),s("code",[e._v("DOM")]),e._v("的更新。")]),e._v(" "),s("p",[e._v("接下来通过以下具体的例子了解下"),s("code",[e._v("mount")]),e._v("和"),s("code",[e._v("update")]),e._v("分别对应"),s("code",[e._v("Fiber")]),e._v("树的构建和替换的过程。")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("App")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" setName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("useState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'React'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("p onClick"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("setName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'hahah'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("h3",{attrs:{id:"mount"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mount"}},[e._v("#")]),e._v(" mount")]),e._v(" "),s("p",[e._v("以上述代码为例，在首屏渲染时，对应的"),s("code",[e._v("current Fiber")]),e._v("树结构是："),s("br")]),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:t(410),alt:"fiberTree"}})]),s("p"),e._v(" "),s("p",[e._v("其中"),s("code",[e._v("FiberRootNode")]),e._v("是整个应用的根节点，这个根节点通常就是"),s("code",[e._v("div#root")]),e._v("。而"),s("code",[e._v("rootFiber")]),e._v("是通过"),s("code",[e._v("ReactDOM.create/ReactDOM.render")]),e._v("创建的根"),s("code",[e._v("Fiber")]),e._v("节点。")]),e._v(" "),s("p",[s("code",[e._v("FiberRootNode")]),e._v("的"),s("code",[e._v("current")]),e._v("指针会指向当前页面上已渲染内容对应"),s("code",[e._v("Fiber")]),e._v("树，即"),s("code",[e._v("current Fiber")]),e._v("树。")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[e._v("fiberRootNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("current "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" rootFiber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),s("p",[e._v("由于是首屏渲染，页面中还没有挂载任何"),s("code",[e._v("DOM")]),e._v("，所以"),s("code",[e._v("rootFiber")]),e._v("下没有任何子"),s("code",[e._v("Fiber")]),e._v("节点，即当前"),s("code",[e._v("current Fiber")]),e._v("树为空。")]),e._v(" "),s("p",[e._v("接着会进入"),s("code",[e._v("render")]),e._v("阶段，根据组件返回的"),s("code",[e._v("React Element")]),e._v("会创建对应的"),s("code",[e._v("Fiber")]),e._v("节点，并将创建的"),s("code",[e._v("Fiber")]),e._v("节点通过"),s("code",[e._v("child")]),e._v("指针连接起来，一起构成"),s("code",[e._v("Fiber")]),e._v("树。这棵树就是"),s("code",[e._v("workInProgress Fiber")]),e._v("树。并且，在构建"),s("code",[e._v("workInProgress Fiber")]),e._v("树时会尝试复用"),s("code",[e._v("current Fiber")]),e._v("树中对应的"),s("code",[e._v("Fiber")]),e._v("节点的内在属性。对应"),s("code",[e._v("workInProgress Fiber")]),e._v("树是：\n")]),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:t(411),alt:"fiberTree"}})]),s("p"),e._v(" "),s("p",[e._v("当"),s("code",[e._v("workInProgress Fiber")]),e._v("树经过"),s("code",[e._v("render")]),e._v("阶段的创建完成后，会在"),s("code",[e._v("commit")]),e._v("阶段渲染到页面上。\n")]),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:t(412),alt:"fiberTree"}})]),s("p"),e._v(" "),s("h3",{attrs:{id:"update"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#update"}},[e._v("#")]),e._v(" update")]),e._v(" "),s("p",[e._v("当点击"),s("code",[e._v("p")]),e._v("节点触发状态更新时，会开启一次状态更新流程，即进入"),s("code",[e._v("render")]),e._v("阶段开始构建一颗新的"),s("code",[e._v("workInProgress Fiber")]),e._v("树。\n")]),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:t(413),alt:"fiberTree"}})]),s("p"),e._v(" "),s("p",[e._v("和"),s("code",[e._v("mount")]),e._v("时一样，"),s("code",[e._v("workInProgress Fiber")]),e._v("的创建可以复用"),s("code",[e._v("current Fiber")]),e._v("树对应的节点数据。\n当"),s("code",[e._v("workInProgress Fiber")]),e._v("树在"),s("code",[e._v("render")]),e._v("阶段完成构建后进入"),s("code",[e._v("commit")]),e._v("阶段渲染到页面上。渲染完毕后，"),s("code",[e._v("workInProgress Fiber")]),e._v("树又会变为"),s("code",[e._v("current Fiber")]),e._v("树。\n")]),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:t(414),alt:"fiberTree"}})]),s("p"),e._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),s("p",[e._v("本文介绍了"),s("code",[e._v("Fiber")]),e._v("树会通过先构建"),s("code",[e._v("workInProgress Fiber")]),e._v("树然后替换页面上显示的"),s("code",[e._v("current Fiber")]),e._v('树的方式工作，这种被称为"'),s("em",[e._v("双缓存")]),e._v('"技术实现'),s("code",[e._v("DOM")]),e._v("的更新了。")]),e._v(" "),s("p",[e._v("其中创建"),s("code",[e._v("Fiber")]),e._v("节点的过程被称为"),s("code",[e._v("render")]),e._v("阶段，会在"),s("RouterLink",{attrs:{to:"/docs/architecture/reconciler.html"}},[e._v("Reconciler")]),e._v("介绍。")],1)])}),[],!1,null,null,null);r.default=v.exports}}]);